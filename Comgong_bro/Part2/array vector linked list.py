#1) 배열 Array
arr = [10, 11, 12, 13]
arr[2] = 5
##- 삽입/삭제' 시간복잡도 : O(N)
##- 탐색 : O(1) 
##=> 탐색이 더 시간 복잡도가 빠르다.
##-Python은 리스트를 사용



#2) 벡터 Vector
#:  c++ 유저를 위해 준비함
v = []
v.append((123, 456))
v.append((789, 987))
print("size:", len(v))
for p in v:
	print(p)
##파이썬은 list를 쓰면 원래 사이즈가 변경가능하기 때문에 list를 쓰고, 
##pair처럼 2개의 값을 저장하기 위해서는 튜플(?)을 사용할 수 있다.
##물론, 리스트를 사용할 수도 있는데 여기서는 튜플을 사용해 보았다.



#3) 연결 리스트 Linked List
#c++에서는 기본 stl로 오른쪽 코드처럼 제공.
#ps에서는 별로 안쓰이지만 다른 자료구조들을 구현할 때 많이 쓰임.
# 알고리즘 문제시 연결리스트를 반드시 필요로 하는 시 잘 없음.
# 다른 자료 구조를 구현할 때 연결리스트로 구현하는 경우가 많음
## 배열하고 특성 반대
#=> 삽입삭제가 빠르고 탐색이 오래걸린다. (면접: 배열vs 연결리스트 비교문제)
#
# (1) 삽입
#Linked list
#  (1) 값 4 담고있는 노드 하나 생성한 다음,
#  (2) 빨강 화살표
# :다음 노드의 메모리 주소값을 여기에 저장했다. 연결만 해주면 끝이다.
#
# (2) 삭제
#  (1) 연결관계 다음노드로 바꿔주고
#  (2) 삭제하고픈 노드를 삭제하면 끝난다.
# 즉, 삽입은
# N개의 내에서 하나하나 해주는 작업이 없고 삽입하는 위치의 노드 이전, 이후에 대해서만 관계를 맺으면 삽입 작업이 끝난다.
# 결국 삽입/삭제 속도: O(1)

